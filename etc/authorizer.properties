############################# Confluent Authorizer Settings  #############################

# Uncomment to enable Confluent Authorizer with support for ACLs, LDAP groups and RBAC
#authorizer.class.name=io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
#authorizer.class.name=kafka.security.auth.SimpleAclAuthorizer
authorizer.class.name=io.confluent.kafka.security.ldap.authorizer.LdapAuthorizer
super.users=User:kafka
# LDAP provider URL
ldap.java.naming.provider.url=ldap://WIN-T61AI3L2LVP.ad.eb.id.au:3268/DC=AD,DC=EB,DC=ID,DC=AU
# Refresh interval for LDAP cache. If set to zero, persistent search is used.
ldap.refresh.interval.ms=60000
# Security authentication protocol for LDAP context
ldap.java.naming.security.authentication=GSSAPI
# Security principal for LDAP context
ldap.java.naming.security.principal=kafka/elhack.ad.eb.id.au@AD.EB.ID.AU

ldap.sasl.jaas.config=com.sun.security.auth.module.Krb5LoginModule required \
keyTab="/Users/eb/Applications/confluent/etc/security/kafka.ktab" \
principal="kafka/elhack.ad.eb.id.au@AD.EB.ID.AU" \
serviceName="kafka" \
debug="true" \
storeKey="true" \
useKeyTab="true";


# Search base for group-based search
ldap.group.search.base=CN=Users
# Object class for groups
ldap.group.object.class=group
# Name of the attribute from which group name used in ACLs is obtained
ldap.group.name.attribute=sAMAccountName
# Regex pattern to obtain group name used in ACLs from the attribute `ldap.group.name.attribute`
ldap.group.name.attribute.pattern=
# Name of the attribute from which group members (user principals) are obtained
ldap.group.member.attribute=member
# Regex pattern to obtain user principal from group member attribute
ldap.group.member.attribute.pattern=CN=(.*),CN=Users,DC=AD,DC=EB,DC=ID,DC=AU

allow.everyone.if.no.acl.found=true
# Semi-colon separated list of super users in the format <principalType>:<principalName>
